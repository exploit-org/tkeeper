package org.exploit.keeper.api.auth

import org.eclipse.jetty.client.api.Request
import org.exploit.crypto.curve.Ed25519Provider
import org.exploit.jettyx.auth.Authorization
import org.exploit.keeper.db.RocksKeyDB
import org.exploit.keeper.extension.toBase64
import org.exploit.tss.util.Hash

class KeeperAuthenticator(private val db: RocksKeyDB): Authorization {
    private val initData by lazy {
        db.readInitData()
    }

    override fun apply(request: Request) {
        val timestamp = System.currentTimeMillis()
        val path = request.path
        val payload = Hash.sha256("${initData.peerId}:$path:$timestamp".toByteArray())

        val integrityKeyPair = db.getIntegrityKeyPair()

        try {
            val signature = Ed25519Provider.getInstance().sign(payload, integrityKeyPair)
                .encode()
                .toBase64()

            request.headers {
                it.add(HEADER_INSTANCE_ID, initData.peerId.toString())
                it.add(HEADER_TIMESTAMP, timestamp.toString())
                it.add(HEADER_SIGNATURE, signature)
            }
        } finally {
            integrityKeyPair.erase()
        }
    }

    companion object {
        const val HEADER_INSTANCE_ID = "X-INSTANCE-ID"
        const val HEADER_TIMESTAMP = "X-TIMESTAMP"
        const val HEADER_SIGNATURE = "X-SIGNATURE"
    }
}