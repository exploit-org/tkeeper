package org.exploit.keeper.api

import org.eclipse.jetty.http.HttpMethod
import org.exploit.jettyx.annotation.HttpRequest
import org.exploit.jettyx.annotation.Query
import org.exploit.jettyx.model.HttpResponse
import org.exploit.keeper.constant.CurveName
import org.exploit.keeper.model.keygen.ShamirShareDto
import java.util.concurrent.CompletableFuture

interface KeyGenApi {
    @HttpRequest(path = "/v1/keygen/init", method = HttpMethod.POST)
    fun init(@Query("keyId") keyId: String, @Query("curve") curve: CurveName, @Query("overwrite") overwrite: Boolean): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(path = "/v1/keygen/share", method = HttpMethod.GET)
    fun share(@Query("keyId") keyId: String): CompletableFuture<HttpResponse<ShamirShareDto>>
    
    @HttpRequest(path = "/v1/keygen/collect", method = HttpMethod.POST)
    fun collect(@Query("keyId") keyId: String): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(path = "/v1/keygen/compute", method = HttpMethod.POST)
    fun compute(@Query("keyId") keyId: String): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(path = "/v1/keygen/abort", method = HttpMethod.POST)
    fun abort(@Query("keyId") keyId: String): CompletableFuture<HttpResponse<Void>>
}