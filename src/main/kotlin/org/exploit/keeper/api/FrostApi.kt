package org.exploit.keeper.api

import org.eclipse.jetty.http.HttpMethod
import org.exploit.jettyx.annotation.Body
import org.exploit.jettyx.annotation.Header
import org.exploit.jettyx.annotation.HttpRequest
import org.exploit.jettyx.annotation.Query
import org.exploit.jettyx.model.HttpResponse
import org.exploit.keeper.model.common.InitSession
import org.exploit.keeper.model.frost.ComputedZ
import org.exploit.keeper.model.frost.FrostOperationCommitment
import org.exploit.keeper.provider.MessagePackProvider
import java.util.concurrent.CompletableFuture

interface FrostApi {
    @HttpRequest(method = HttpMethod.POST, path = "/v1/frost/init")
    fun init(@Body body: InitSession, @Header("Content-Type") contentType: String = MessagePackProvider.MSGPACK_MIME): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(method = HttpMethod.POST, path = "/v1/frost/commitment")
    fun storeCommitment(
        @Query("sessionId") sessionId: String,
        @Body body: FrostOperationCommitment,
        @Header("Content-Type") contentType: String = MessagePackProvider.MSGPACK_MIME
    ): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(method = HttpMethod.POST, path = "/v1/frost/commitment/broadcast")
    fun broadcast(
        @Query("sessionId") sessionId: String
    ): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(method = HttpMethod.GET, path = "/v1/frost/signature/z")
    fun computeZ(
        @Query("sessionId") sessionId: String
    ): CompletableFuture<HttpResponse<ComputedZ>>

    @HttpRequest(method = HttpMethod.GET, path = "/v1/frost/abort")
    fun abort(
        @Query("sessionId") sessionId: String
    ): CompletableFuture<HttpResponse<Void>>
}