package org.exploit.keeper.api

import org.eclipse.jetty.http.HttpMethod
import org.exploit.gmp.BigInt
import org.exploit.jettyx.annotation.Body
import org.exploit.jettyx.annotation.ContentType
import org.exploit.jettyx.annotation.HttpRequest
import org.exploit.jettyx.annotation.Query
import org.exploit.jettyx.model.HttpResponse
import org.exploit.keeper.model.common.InitSession
import org.exploit.keeper.model.common.Value
import org.exploit.keeper.model.gg20.commitment.GG20GammaCommitmentDto
import org.exploit.keeper.model.gg20.commitment.GG20OfflinePhaseData
import org.exploit.keeper.model.gg20.mta.GG20MtAComputeRequest
import org.exploit.keeper.model.gg20.mta.GG20MtAResult
import java.util.concurrent.CompletableFuture

interface GG20Api {
    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = "/v1/gg20/init")
    fun init(@Body session: InitSession): CompletableFuture<HttpResponse<Void>>

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = "/v1/gg20/commitment")
    fun storeCommitment(
        @Query("sessionId") sessionId: String,
        @Body body: GG20GammaCommitmentDto
    ): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(method = HttpMethod.POST, path = "/v1/gg20/commitment/broadcast")
    fun broadcastCommitment(
        @Query("sessionId") sessionId: String
    ): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(method = HttpMethod.POST, path = "/v1/gg20/mta/exchange")
    fun exchangeMta(
        @Query("sessionId") sessionId: String
    ): CompletableFuture<HttpResponse<Void>>

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = "/v1/gg20/mta/compute")
    fun computeMta(
        @Body request: GG20MtAComputeRequest
    ): CompletableFuture<HttpResponse<GG20MtAResult>>

    @ContentType("application/json")
    @HttpRequest(method = HttpMethod.POST, path = "/v1/gg20/prephase")
    fun storeOfflinePhase(
        @Query("sessionId") sessionId: String,
        @Body data: GG20OfflinePhaseData
    ): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(method = HttpMethod.POST, path = "/v1/gg20/prephase/broadcast")
    fun broadcastOfflinePhase(
        @Query("sessionId") sessionId: String
    ): CompletableFuture<HttpResponse<Void>>

    @HttpRequest(method = HttpMethod.GET, path = "/v1/gg20/signature/s")
    fun computeS(
        @Query("sessionId") sessionId: String
    ): CompletableFuture<HttpResponse<Value<BigInt>>>

    @HttpRequest(method = HttpMethod.POST, path = "/v1/gg20/abort")
    fun abort(
        @Query("sessionId") sessionId: String
    ): CompletableFuture<HttpResponse<Void>>
}