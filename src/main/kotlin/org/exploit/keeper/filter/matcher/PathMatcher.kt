package org.exploit.keeper.filter.matcher

class PathMatcher(pattern: String) {
    private val patternSegments: List<Segment> = pattern.split("/")
        .map { Segment(it) }

    fun match(path: String): Boolean {
        val pathSegments = path.split("/")
        var patternIdx = 0
        var pathIdx = 0

        while (patternIdx < patternSegments.size && pathIdx <= pathSegments.size) {
            val patternSegment = patternSegments[patternIdx]

            if (patternSegment.isDoubleWildcard) {
                patternIdx++
                if (patternIdx == patternSegments.size) return true
                while (pathIdx < pathSegments.size && pathSegments[pathIdx] != patternSegments[patternIdx].value) {
                    pathIdx++
                }
            } else if (pathIdx < pathSegments.size) {
                if (patternSegment.matches(pathSegments[pathIdx])) {
                    patternIdx++
                    pathIdx++
                } else {
                    return false
                }
            } else {
                break
            }
        }
        return patternIdx == patternSegments.size && pathIdx == pathSegments.size
    }

    private class Segment(val value: String) {
        val isWildcard: Boolean = value == "*"
        val isDoubleWildcard: Boolean = value == "**"

        fun matches(segment: String): Boolean = isWildcard || isDoubleWildcard || value == segment
    }
}