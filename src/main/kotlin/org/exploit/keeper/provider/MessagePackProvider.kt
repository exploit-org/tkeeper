package org.exploit.keeper.provider

import jakarta.ws.rs.BadRequestException
import jakarta.ws.rs.Consumes
import jakarta.ws.rs.Produces
import jakarta.ws.rs.WebApplicationException
import jakarta.ws.rs.core.MediaType
import jakarta.ws.rs.core.MultivaluedMap
import jakarta.ws.rs.ext.MessageBodyReader
import jakarta.ws.rs.ext.MessageBodyWriter
import jakarta.ws.rs.ext.Provider
import org.exploit.keeper.extension.messagePackMapper
import org.exploit.keeper.provider.MessagePackProvider.Companion.MSGPACK_MIME
import java.io.InputStream
import java.io.OutputStream
import java.lang.reflect.Type

@Provider
@Consumes(MSGPACK_MIME)
@Produces(MSGPACK_MIME)
class MessagePackProvider: MessageBodyReader<Any>, MessageBodyWriter<Any> {
    override fun isReadable(
        type: Class<*>?,
        genericType: Type?,
        annotations: Array<out Annotation>?,
        mediaType: MediaType?
    ): Boolean = isMsgPack(mediaType)

    override fun isWriteable(p0: Class<*>?, p1: Type?, p2: Array<out Annotation>?, p3: MediaType?): Boolean =
        isMsgPack(p3)

    override fun readFrom(
        type: Class<Any>,
        genericType: Type?,
        annotations: Array<out Annotation>?,
        mediaType: MediaType?,
        httpHeaders: MultivaluedMap<String, String>?,
        entityStream: InputStream
    ): Any {
        try {
            val javaType = messagePackMapper.constructType(genericType ?: type)
            return messagePackMapper.readValue(entityStream, javaType)
        } catch (e: Exception) {
            throw BadRequestException("Invalid MessagePack payload", e)
        }
    }

    override fun getSize(
        t: Any?,
        type: Class<*>?,
        genericType: Type?,
        annotations: Array<out Annotation>?,
        mediaType: MediaType?
    ) = -1L

    override fun writeTo(
        t: Any,
        type: Class<*>?,
        genericType: Type?,
        annotations: Array<out Annotation>?,
        mediaType: MediaType?,
        httpHeaders: MultivaluedMap<String, Any>?,
        entityStream: OutputStream
    ) =
        try {
            messagePackMapper.writeValue(entityStream, t)
        } catch (e: Exception) {
            throw WebApplicationException("Unable to write MessagePack response", e)
        }

    private fun isMsgPack(mediaType: MediaType?) =
        mediaType == null || MSGPACK_MEDIA.isCompatible(mediaType)

    companion object {
        const val MSGPACK_MIME = "application/x-msgpack"
        val MSGPACK_MEDIA: MediaType = MediaType.valueOf(MSGPACK_MIME)
    }
}