package org.exploit.keeper.extension

import io.smallrye.mutiny.Multi
import io.smallrye.mutiny.Uni
import io.smallrye.mutiny.converters.uni.UniReactorConverters
import reactor.core.publisher.Mono
import java.util.concurrent.CompletableFuture

fun <T> CompletableFuture<T>.toMono(): Mono<T> = Mono.fromFuture(this)

fun <T> CompletableFuture<T>.toUni(): Uni<T> = Uni.createFrom().completionStage(this)

fun <T> Mono<T>.toUni(): Uni<T> = UniReactorConverters.fromMono<T>().from(this)

fun <T> Multi<T>.waitAll(): Uni<List<T>> {
    return collect().asList()
}