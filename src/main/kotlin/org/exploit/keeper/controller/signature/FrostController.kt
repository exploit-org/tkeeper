package org.exploit.keeper.controller.signature

import io.smallrye.mutiny.Uni
import jakarta.inject.Singleton
import jakarta.ws.rs.*
import org.exploit.keeper.api.auth.KeeperAuthenticator
import org.exploit.keeper.constant.KeeperCurve
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.extension.unwrap
import org.exploit.keeper.model.common.InitSession
import org.exploit.keeper.model.frost.ComputedZ
import org.exploit.keeper.model.frost.FrostOperationCommitment
import org.exploit.keeper.service.signature.frost.FrostCommitmentHandler
import org.exploit.keeper.service.signature.frost.FrostSessionFactory
import org.exploit.keeper.service.signature.frost.FrostSignaturePartHandler

@Singleton
@Path("/v1/frost")
class FrostController(
    private val sessionFactory: FrostSessionFactory,
    private val commitmentHandler: FrostCommitmentHandler,
    private val signatureHandler: FrostSignaturePartHandler,
) {
    @POST
    @Path("/init")
    fun init(body: InitSession) {
        sessionFactory.createSession(body.sessionId, body.keyId, body.operations.unwrap(), body.participants,
            KeeperCurve.fromName(body.curve))
    }

    @POST
    @Path("/commitment")
    fun storeCommitment(
        @QueryParam("sessionId") sessionId: String,
        @HeaderParam(KeeperAuthenticator.HEADER_INSTANCE_ID) peerId: Int,
        body: FrostOperationCommitment
    ) {
        commitmentHandler.store(sessionId, peerId, body)
    }

    @POST
    @Path("/commitment/broadcast")
    fun broadcast(@QueryParam("sessionId") sessionId: String): Uni<Void> =
        commitmentHandler.broadcast(sessionId).toUni()

    @GET
    @Path("/signature/z")
    fun computeZ(@QueryParam("sessionId") sessionId: String): ComputedZ =
        signatureHandler.computeZ(sessionId)

    @GET
    @Path("/abort")
    fun abort(@QueryParam("sessionId") sessionId: String) {
        sessionFactory.clear(sessionId)
    }
}