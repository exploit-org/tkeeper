package org.exploit.keeper.controller.signature

import io.smallrye.mutiny.Uni
import jakarta.inject.Singleton
import jakarta.validation.constraints.NotNull
import jakarta.ws.rs.*
import org.exploit.keeper.api.auth.KeeperAuthenticator
import org.exploit.keeper.constant.CurveName
import org.exploit.keeper.constant.SessionType
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.extension.unwrap
import org.exploit.keeper.model.common.InitSession
import org.exploit.keeper.model.frost.ComputedZ
import org.exploit.keeper.model.frost.FrostOperationCommitment
import org.exploit.keeper.service.signature.frost.FrostSessionManager
import org.exploit.keeper.service.signature.instance.SessionManagerResolver

@Singleton
@Path("/v1/frost")
class FrostController(
    private val resolver: SessionManagerResolver,
) {
    @POST
    @Path("/init")
    fun init(@NotNull body: InitSession) {
        manager(body.curve).createSession(
            body.sessionId,
            body.keyId,
            body.operations.unwrap(),
            body.publicKey,
            body.participants
        )
    }

    @POST
    @Path("/commitment")
    fun storeCommitment(
        @NotNull @QueryParam("sessionId") sessionId: String,
        @NotNull @HeaderParam(KeeperAuthenticator.HEADER_INSTANCE_ID) peerId: Int,
        body: FrostOperationCommitment
    ) {
        manager(sessionId).respondent
            .commitment
            .store(sessionId, peerId, body)
    }

    @POST
    @Path("/commitment/broadcast")
    fun broadcast(@NotNull @QueryParam("sessionId") sessionId: String): Uni<Void> =
        manager(sessionId).respondent
            .commitment
            .broadcast(sessionId)
            .toUni()

    @GET
    @Path("/signature/z")
    fun computeZ(@NotNull @QueryParam("sessionId") sessionId: String): ComputedZ =
        manager(sessionId).respondent
            .sigPart
            .computeZ(sessionId)

    @GET
    @Path("/abort")
    fun abort(@NotNull @QueryParam("sessionId") sessionId: String) {
        manager(sessionId).clear(sessionId)
    }

    private fun manager(curve: CurveName): FrostSessionManager<*> =
        resolver.findManager(SessionType.FROST, curve) as? FrostSessionManager<*>
            ?: throw BadRequestException("GG20 Session manager not found for $curve")

    private fun manager(sessionId: String): FrostSessionManager<*> =
        resolver.findBySessionId(SessionType.FROST, sessionId) as? FrostSessionManager<*>
            ?: throw BadRequestException("GG20 Session manager not found for $sessionId")
}