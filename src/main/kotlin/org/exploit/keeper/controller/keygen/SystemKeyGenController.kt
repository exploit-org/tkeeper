package org.exploit.keeper.controller.keygen

import io.smallrye.mutiny.Uni
import jakarta.validation.constraints.NotNull
import jakarta.ws.rs.*
import org.exploit.keeper.api.auth.KeeperAuthenticator
import org.exploit.keeper.constant.CurveName
import org.exploit.keeper.constant.KeeperCurve
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.model.keygen.ShamirShareDto
import org.exploit.keeper.service.keygen.DistributedKeyCollector
import org.exploit.keeper.service.keygen.DistributedKeyGen

@Path("/v1/keygen")
class SystemKeyGenController(
    private val generator: DistributedKeyGen,
    private val collector: DistributedKeyCollector
) {
    @POST
    @Path("/init")
    fun init(
        @NotNull @QueryParam("keyId") keyId: String,
        @NotNull @QueryParam("curve") curve: CurveName,
        @QueryParam("overwrite") overwrite: Boolean?
    ) {
        generator.init(keyId, KeeperCurve.fromName(curve), overwrite ?: false)
    }

    @POST
    @Path("/collect")
    fun collect(@NotNull @QueryParam("keyId") keyId: String): Uni<Void> =
        collector.collect(keyId).toUni()

    @POST
    @Path("/compute")
    fun compute(@NotNull @QueryParam("keyId") keyId: String) {
        generator.compute(keyId)
    }

    @POST
    @Path("/abort")
    fun abort(@NotNull @QueryParam("keyId") sessionId: String) {
        generator.abort(sessionId)
    }

    @GET
    @Path("/share")
    fun share(
        @QueryParam("keyId") keyId: String,
        @HeaderParam(KeeperAuthenticator.HEADER_INSTANCE_ID) peerId: Int
    ): ShamirShareDto =
        generator.share(peerId, keyId)
}