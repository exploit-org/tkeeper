package org.exploit.keeper.controller

import io.smallrye.mutiny.Uni
import jakarta.inject.Singleton
import jakarta.ws.rs.*
import org.exploit.keeper.api.auth.KeeperAuthenticator
import org.exploit.keeper.constant.KeeperCurve
import org.exploit.keeper.extension.decodeBase64
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.model.TSSResult
import org.exploit.keeper.model.common.InitSession
import org.exploit.keeper.model.common.Value
import org.exploit.keeper.model.frost.FrostCommitmentDto
import org.exploit.keeper.model.request.Sign
import org.exploit.keeper.service.frost.FrostCommitmentHandler
import org.exploit.keeper.service.frost.FrostSessionFactory
import org.exploit.keeper.service.frost.FrostSignaturePartHandler
import org.exploit.keeper.service.frost.initiator.FrostSignatureService
import java.math.BigInteger

@Singleton
@Path("/v1/frost")
class FrostController(
    private val sessionFactory: FrostSessionFactory,
    private val commitmentHandler: FrostCommitmentHandler,
    private val signatureHandler: FrostSignaturePartHandler,
    private val signature: FrostSignatureService
) {
    @POST
    @Path("/sign")
    fun sign(body: Sign): Uni<TSSResult> {
        val curve = KeeperCurve.fromName(body.curve)

        return signature.sign(body.sessionId, body.keyId, body.message64.decodeBase64(), curve)
    }

    @POST
    @Path("/init")
    fun init(body: InitSession) {
        val message = body.message64.decodeBase64()
        sessionFactory.createSession(body.sessionId, body.keyId, message, body.participants,
            KeeperCurve.fromName(body.curve))
    }

    @POST
    @Path("/commitment")
    fun storeCommitment(
        @QueryParam("sessionId") sessionId: String,
        @HeaderParam(KeeperAuthenticator.HEADER_INSTANCE_ID) peerId: Int,
        body: FrostCommitmentDto
    ) {
        commitmentHandler.store(sessionId, peerId, body)
    }

    @POST
    @Path("/commitment/broadcast")
    fun broadcast(@QueryParam("sessionId") sessionId: String): Uni<Void> =
        commitmentHandler.broadcast(sessionId).toUni()

    @GET
    @Path("/signature/z")
    fun computeZ(@QueryParam("sessionId") sessionId: String): Value<BigInteger> =
        signatureHandler.computeZ(sessionId)

    @GET
    @Path("/abort")
    fun abort(@QueryParam("sessionId") sessionId: String) {
        sessionFactory.clear(sessionId)
    }
}