package org.exploit.keeper.controller.core

import io.smallrye.mutiny.Uni
import jakarta.ws.rs.GET
import jakarta.ws.rs.Path
import jakarta.ws.rs.QueryParam
import jakarta.ws.rs.container.ContainerRequestContext
import org.exploit.keeper.constant.Permission
import org.exploit.keeper.exception.SealedException
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.model.PublicKeyDto
import org.exploit.keeper.service.auth.policy.MachinePolicyChecker
import org.exploit.keeper.service.core.KeeperSealService
import org.exploit.keeper.service.pub.PublicKeyService
import org.jboss.resteasy.reactive.ResponseStatus

@Path("/v1/keeper")
class CentralController(
    private val pub: PublicKeyService,
    private val keeper: KeeperSealService,
    private val policyChecker: MachinePolicyChecker,
    private val ctx: ContainerRequestContext
) {
    @Path("/ping")
    @ResponseStatus(200)
    fun ping() {}

    @GET
    @Path("/publicKey")
    fun publicKey(@QueryParam("keyId") keyId: String): Uni<PublicKeyDto> {
        if (!keeper.initialized())
            throw SealedException()

        policyChecker.ensureHasPermission(ctx, Permission.keyGetPublicKey(keyId))

        return pub.getPublicKey(keyId).toUni()
    }
}