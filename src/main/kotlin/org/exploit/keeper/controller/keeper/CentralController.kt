package org.exploit.keeper.controller.keeper

import io.smallrye.mutiny.Uni
import jakarta.validation.constraints.NotNull
import jakarta.ws.rs.GET
import jakarta.ws.rs.Path
import jakarta.ws.rs.QueryParam
import jakarta.ws.rs.container.ContainerRequestContext
import org.exploit.keeper.constant.Permission
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.model.PublicKeyDto
import org.exploit.keeper.model.common.Value
import org.exploit.keeper.model.health.ShortStatus
import org.exploit.keeper.service.auth.policy.MachinePolicyChecker
import org.exploit.keeper.service.core.KeeperInitService
import org.exploit.keeper.service.pub.PublicKeyService
import org.jboss.resteasy.reactive.ResponseStatus

@Path("/v1/keeper")
class CentralController(
    private val pub: PublicKeyService,
    private val keeper: KeeperInitService,
    private val policyChecker: MachinePolicyChecker,
    private val ctx: ContainerRequestContext,
) {
    @GET
    @Path("/ping")
    @ResponseStatus(200)
    fun ping(): ShortStatus =
        ShortStatus(ready = keeper.initialized() && !keeper.sealed())

    @GET
    @Path("/publicKey")
    fun publicKey(@NotNull @QueryParam("keyId") keyId: String): Uni<PublicKeyDto> {
        policyChecker.ensureHasPermission(ctx, Permission.keyGetPublicKey(keyId))
        keeper.ensureReady()

        return pub.getPublicKey(keyId).toUni()
    }

    @GET
    @Path("/peerId")
    fun peerId(): Value<Int> {
        keeper.ensureReady()
        return Value(serviceId = keeper.peerId(), result = keeper.peerId())
    }
}