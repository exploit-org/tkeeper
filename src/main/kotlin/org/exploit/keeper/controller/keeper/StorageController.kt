package org.exploit.keeper.controller.keeper

import io.smallrye.mutiny.Uni
import jakarta.validation.constraints.NotNull
import jakarta.ws.rs.DELETE
import jakarta.ws.rs.POST
import jakarta.ws.rs.Path
import jakarta.ws.rs.QueryParam
import jakarta.ws.rs.container.ContainerRequestContext
import org.exploit.keeper.constant.Permission
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.model.request.Store
import org.exploit.keeper.service.auth.policy.MachinePolicyChecker
import org.exploit.keeper.service.core.KeeperStorageService

@Path("/v1/keeper/storage")
class StorageController(
    private val ctx: ContainerRequestContext,
    private val policyChecker: MachinePolicyChecker,
    private val storage: KeeperStorageService
) {
    @POST
    @Path("/store")
    fun store(@NotNull body: Store): Uni<Void> {
        policyChecker.ensureHasPermission(ctx, Permission.storageWrite())
        return storage.store(body).toUni()
    }

    @DELETE
    @Path("/delete")
    fun delete(@NotNull @QueryParam("keyId") keyId: String): Uni<Void> {
        policyChecker.ensureHasPermission(ctx, Permission.storageDelete())

        return storage.delete(keyId).toUni()
    }
}