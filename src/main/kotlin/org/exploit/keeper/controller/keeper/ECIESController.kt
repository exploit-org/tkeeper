package org.exploit.keeper.controller.keeper

import io.smallrye.mutiny.Uni
import jakarta.ws.rs.POST
import jakarta.ws.rs.Path
import jakarta.ws.rs.container.ContainerRequestContext
import org.exploit.keeper.constant.Permission
import org.exploit.keeper.extension.decodeBase64
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.model.Decrypted
import org.exploit.keeper.model.Encrypted
import org.exploit.keeper.model.request.Decrypt
import org.exploit.keeper.model.request.Encrypt
import org.exploit.keeper.service.auth.policy.MachinePolicyChecker
import org.exploit.keeper.service.ecies.ThresholdECIESManager

@Path("/v1/keeper/ecies")
class ECIESController(
    private val ctx: ContainerRequestContext,
    private val policyChecker: MachinePolicyChecker,
    private val manager: ThresholdECIESManager
) {
    @POST
    @Path("/encrypt")
    fun encrypt(body: Encrypt): Uni<Encrypted> {
        policyChecker.ensureHasPermission(ctx, Permission.keyEncrypt(body.keyId))

        return manager.encrypt(
            keyId = body.keyId,
            cipherType = body.cipher,
            plaintext = body.plaintext64.decodeBase64()
        ).toUni()
    }

    @POST
    @Path("/decrypt")
    fun decrypt(body: Decrypt): Uni<Decrypted> {
        policyChecker.ensureHasPermission(ctx, Permission.keyDecrypt(body.keyId))

        return manager.decrypt(
            keyId = body.keyId,
            cipherType = body.cipher,
            ciphertext = body.ciphertext64.decodeBase64()
        ).toUni()
    }
}