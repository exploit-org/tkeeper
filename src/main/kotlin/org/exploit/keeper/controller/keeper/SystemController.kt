package org.exploit.keeper.controller.keeper

import jakarta.ws.rs.GET
import jakarta.ws.rs.POST
import jakarta.ws.rs.PUT
import jakarta.ws.rs.Path
import jakarta.ws.rs.container.ContainerRequestContext
import org.exploit.keeper.constant.Permission
import org.exploit.keeper.model.request.Unseal
import org.exploit.keeper.model.seal.StatusResponse
import org.exploit.keeper.model.seal.init.InitData
import org.exploit.keeper.model.seal.progress.Progress
import org.exploit.keeper.service.auth.policy.MachinePolicyChecker
import org.exploit.keeper.service.core.KeeperSealService

@Path("/v1/keeper/system")
class SystemController(
    private val keeper: KeeperSealService,
    private val ctx: ContainerRequestContext,
    private val policyChecker: MachinePolicyChecker
) {
    @POST
    @Path("/init")
    fun init(): InitData {
        policyChecker.ensureHasPermission(ctx, Permission.systemInit())
        return keeper.initialize()
    }

    @GET
    @Path("/status")
    fun status(): StatusResponse {
        policyChecker.ensureHasPermission(ctx, Permission.systemStatus())
        return keeper.status()
    }

    @PUT
    @Path("/unseal")
    fun unseal(req: Unseal): Progress {
        policyChecker.ensureHasPermission(ctx, Permission.systemUnseal())
        return keeper.submit(req.payload64)
    }

    @PUT
    @Path("/seal")
    fun seal() {
        policyChecker.ensureHasPermission(ctx, Permission.systemSeal())
        keeper.seal()
    }
}