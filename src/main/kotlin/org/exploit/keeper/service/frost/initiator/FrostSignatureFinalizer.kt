package org.exploit.keeper.service.frost.initiator

import jakarta.inject.Singleton
import org.exploit.crypto.signature.Signature
import org.exploit.keeper.api.client.BitKeeperClient
import org.exploit.keeper.extension.toMono
import org.exploit.keeper.service.frost.FrostSessionFactory
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

@Singleton
class FrostSignatureFinalizer(private val factory: FrostSessionFactory) {
    fun completeSignature(clients: List<BitKeeperClient> , sessionId: String): Mono<Signature> {
        val session = factory.session(sessionId)
        val z = session.client.signature().computeZ()
        session.client.aggregator().storeZ(session.client.context().crypto().idx(), z)

        return Flux.fromIterable(clients)
            .flatMap {
                it.frost.computeZ(sessionId).toMono()
                    .handle { v, s ->
                        try {
                            session.client.aggregator().storeZ(it.peerId, v.result)
                            s.next(v)
                        } catch (e: Exception) {
                            s.error(e)
                        }
                    }
            }
            .then(Mono.defer { Mono.just(session.client.aggregator().computeSignature()) })
    }
}