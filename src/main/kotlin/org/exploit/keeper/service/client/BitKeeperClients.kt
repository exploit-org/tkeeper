package org.exploit.keeper.service.client

import jakarta.inject.Singleton
import org.exploit.keeper.api.client.BitKeeperClient
import org.exploit.keeper.config.KeeperConfig
import org.exploit.keeper.exception.BitKeeperException
import org.exploit.keeper.extension.toMono
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

@Singleton
class BitKeeperClients(
    private val config: KeeperConfig,
    private val clients: List<BitKeeperClient>
) {
    fun find(idx: Int): BitKeeperClient =
        clients.firstOrNull { it.peerId == idx }
            ?: throw IllegalArgumentException("Client with service ID $idx not found")

    fun findHealthy(required: Int): Mono<List<BitKeeperClient>> =
        Flux.fromIterable(clients)
            .flatMap { client ->
                client.health.health().toMono()
                    .filter { it.body.ready }
                    .map { client }
                    .onErrorResume { Mono.empty() }
            }
            .take(required.toLong())
            .collectList()
            .handle { clients, sink ->
                if (clients.size < required) {
                    sink.error(BitKeeperException(503, "Not enough healthy or initialized & unsealed clients available"))
                } else {
                    sink.next(clients)
                }
            }

    fun findThreshold(): Mono<List<BitKeeperClient>> =
        findHealthy(config.threshold())

    fun forBroadcast(participants: List<Int>, exclude: Int? = config.idx()): List<BitKeeperClient> =
        clients.filter { it.peerId in participants && it.peerId != exclude }
}