package org.exploit.keeper.service.client

import jakarta.inject.Singleton
import org.exploit.keeper.api.client.BitKeeperClient
import org.exploit.keeper.config.KeeperConfig
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

@Singleton
class BitKeeperClients(
    private val config: KeeperConfig,
    private val clients: List<BitKeeperClient>
) {
    fun find(idx: Int): BitKeeperClient {
        return clients.firstOrNull { it.peerId == idx }
            ?: throw IllegalArgumentException("Client with service ID $idx not found")
    }

    fun findAvailable(): Mono<List<BitKeeperClient>> {
        return Flux.fromIterable(clients)
            .flatMap {
                Mono.fromFuture(it.health.health())
                    .onErrorResume { Mono.empty() }
                    .filter { r -> r.status == 200 }
                    .thenReturn(it)
            }
            .collectList()
            .flatMap {
                if (it.size < config.threshold())
                    Mono.error(IllegalStateException("Not enough healthy clients available"))
                else
                    Mono.just(it.take(config.threshold()))
            }
            .doOnNext {
                LOGGER.debug("Available clients: {}", it.map { client -> client.peerId })
            }
    }

    fun forBroadcast(participants: List<Int>, exclude: Int? = config.idx()): List<BitKeeperClient> {
        return clients.filter { it.peerId in participants && it.peerId != exclude }
    }

    private companion object {
        val LOGGER: Logger = LoggerFactory.getLogger(BitKeeperClients::class.java)
    }
}