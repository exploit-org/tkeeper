package org.exploit.keeper.service.seal.provider

import org.exploit.keeper.exception.SealedException
import org.exploit.keeper.model.seal.init.SealInitData
import org.exploit.keeper.model.seal.init.ShamirInitData
import org.exploit.keeper.model.seal.progress.Progress
import org.exploit.keeper.model.seal.progress.ShamirUnsealProgress
import org.exploit.keeper.service.key.ChaCha20Poly1305Ops
import org.exploit.keeper.service.key.KeyOps
import org.exploit.keeper.util.crypto.Shamir
import org.exploit.sodium.ReadOnlyBuffer
import org.exploit.sodium.SecretBox
import java.util.concurrent.atomic.AtomicReference

class ShamirKeysProvider(
    private val memKey: ReadOnlyBuffer,
    private val total: Int = 5,
    private val threshold: Int = 3
) : SealProvider {
    override val id: String = ID

    override val isAuto: Boolean = false

    private val parts = mutableListOf<Shamir.Share>()
    private var ops: AtomicReference<KeyOps> = AtomicReference<KeyOps>()

    override fun keyOpsOrNull(): KeyOps? = ops.get()

    override fun initialize(): SealInitData {
        val secretKey = Shamir.generateSecretKey()
        val split = Shamir.split(secretKey, total, threshold)

        ops.set(ChaCha20Poly1305Ops(SecretBox.of(secretKey, memKey.read(), true), memKey::read))

        return ShamirInitData(
            threshold = threshold,
            total = total,
            shares64 = Shamir.encodeShares(split)
        )
    }

    override fun keyOpsOrThrow(): KeyOps {
        return keyOpsOrNull() ?: throw SealedException()
    }

    override fun initialProgress(): Progress =
        ShamirUnsealProgress(threshold = threshold, total = total)

    override fun submitPart(payload64: String): ShamirUnsealProgress {
        parts.add(Shamir.Share.fromBase64(payload64))
        return unseal()
    }

    override fun seal() {
        parts.clear()
        ops.set(null)
    }

    override fun unseal(): ShamirUnsealProgress {
        return if (parts.size < threshold) {
            ShamirUnsealProgress(progress = parts.size, total = total, threshold = threshold)
        } else {
            try {
                val secretKey = SecretBox.of(Shamir.combine(parts), memKey.read(), true)
                ops.set(ChaCha20Poly1305Ops(secretKey, memKey::read))

                ShamirUnsealProgress(threshold = threshold, progress = threshold, total = total, ready = true)
            } finally {
                parts.clear()
            }
        }
    }

    companion object {
        const val ID = "shamir"
    }
}