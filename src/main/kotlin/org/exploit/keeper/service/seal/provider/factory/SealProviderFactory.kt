package org.exploit.keeper.service.seal.provider.factory

import jakarta.inject.Singleton
import org.exploit.keeper.config.KeeperConfig
import org.exploit.keeper.service.seal.provider.AwsCloudProvider
import org.exploit.keeper.service.seal.provider.GoogleCloudProvider
import org.exploit.keeper.service.seal.provider.SealProvider
import org.exploit.keeper.service.seal.provider.ShamirKeysProvider

@Singleton
class SealProviderFactory(private val config: KeeperConfig) {
    fun createProvider(): SealProvider {
        return when (config.seal().type()) {
            ShamirKeysProvider.ID -> config.seal().shamir().orElseThrow().let {
                ShamirKeysProvider(it.total(), it.threshold())
            }

            AwsCloudProvider.ID -> config.seal().aws().orElseThrow().let {
                AwsCloudProvider(it)
            }

            GoogleCloudProvider.ID -> config.seal().google().orElseThrow().let {
                GoogleCloudProvider(it)
            }

            else -> error("Unsupported seal provider type: ${config.seal().type()}")
        }
    }
}