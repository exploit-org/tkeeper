package org.exploit.keeper.service.seal.provider

import org.exploit.keeper.config.provider.AwsProviderConfig
import org.exploit.keeper.exception.AutoProviderException
import org.exploit.keeper.model.seal.init.InitData
import org.exploit.keeper.model.seal.progress.Progress
import org.exploit.keeper.model.seal.progress.ReadyProgress
import org.exploit.keeper.service.key.AwsKmsKeyOps
import org.exploit.keeper.service.key.KeyOps
import java.util.concurrent.atomic.AtomicReference

class AwsCloudProvider(private val config: AwsProviderConfig): SealProvider {
    override val id: String = ID
    override val isAuto: Boolean = true

    private val keyOps = AtomicReference(AwsKmsKeyOps(config))

    override fun keyOpsOrNull(): KeyOps = keyOps.get()

    override fun initialize(): InitData {
        throw AutoProviderException()
    }

    override fun submitPart(payload64: String): Progress {
        throw AutoProviderException()
    }

    override fun seal() {
        keyOps.set(null)
    }

    override fun unseal(): Progress {
        keyOps.set(AwsKmsKeyOps(config))
        return ReadyProgress()
    }

    override fun initialProgress(): Progress =
        ReadyProgress()

    companion object {
        const val ID = "aws"
    }
}