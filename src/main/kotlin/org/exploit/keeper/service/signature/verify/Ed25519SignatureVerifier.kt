package org.exploit.keeper.service.signature.verify

import io.smallrye.mutiny.Uni
import jakarta.inject.Singleton
import org.exploit.crypto.curve.Ed25519Provider
import org.exploit.crypto.signature.SchnorrSignature
import org.exploit.crypto.signature.Signature
import org.exploit.keeper.constant.CurveName
import org.exploit.keeper.constant.SignatureType
import org.exploit.keeper.exception.TKeeperException
import org.exploit.keeper.extension.decodeBase64
import org.exploit.keeper.extension.decodePublicKey
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.service.pub.PublicKeyService

@Singleton
class Ed25519SignatureVerifier(private val pub: PublicKeyService): SignatureVerifier {
    override fun verify(keyId: String, data: ByteArray, signature: Signature): Uni<Boolean> {
        return pub.getPublicKey(keyId)
            .map {
                val decoded = decodePublicKey(curve(), it.data64.decodeBase64())
                Ed25519Provider.getInstance().verify(data, signature, decoded)
            }
            .toUni()
    }

    override fun createSignature(bytes: ByteArray): Signature {
        if (bytes.size != 64) {
            throw TKeeperException(400, "Invalid schnorr signature")
        }

        val r = bytes.copyOfRange(0, 32)
        val s = bytes.copyOfRange(32, 64)

        return SchnorrSignature(r, s)
    }

    override fun curve(): CurveName = CurveName.ED25519

    override fun type(): SignatureType = SignatureType.SCHNORR
}