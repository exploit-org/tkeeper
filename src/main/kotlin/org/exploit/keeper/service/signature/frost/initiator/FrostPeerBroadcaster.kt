package org.exploit.keeper.service.signature.frost.initiator

import jakarta.inject.Singleton
import org.exploit.keeper.api.client.BitKeeperClient
import org.exploit.keeper.extension.toMono
import org.exploit.keeper.service.signature.frost.FrostCommitmentHandler
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

@Singleton
class FrostPeerBroadcaster(private val commitmentHandler: FrostCommitmentHandler) {
    fun broadcast(peers: List<BitKeeperClient>, sessionId: String): Mono<List<BitKeeperClient>> {
        return commitmentHandler.broadcast(sessionId)
            .thenMany(Flux.fromIterable(peers))
            .flatMap {
                it.frost.broadcast(sessionId).toMono()
                    .thenReturn(it)
            }
            .collectList()
    }
}