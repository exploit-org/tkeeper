package org.exploit.keeper.service.signature.verify

import io.smallrye.mutiny.Uni
import jakarta.inject.Singleton
import org.exploit.crypto.curve.Secp256k1Provider
import org.exploit.crypto.signature.ECDSASignature
import org.exploit.crypto.signature.Signature
import org.exploit.keeper.constant.CurveName
import org.exploit.keeper.constant.SignatureType
import org.exploit.keeper.extension.decodeBase64
import org.exploit.keeper.extension.decodePublicKey
import org.exploit.keeper.extension.toUni
import org.exploit.keeper.service.pub.PublicKeyService

@Singleton
class ECDSASecp256k1SignatureVerifier(private val pub: PublicKeyService): SignatureVerifier {
    override fun verify(keyId: String, data: ByteArray, signature: Signature): Uni<Boolean> =
        pub.getPublicKey(keyId)
            .map {
                val decoded = decodePublicKey(curve(), it.data64.decodeBase64())
                Secp256k1Provider.getInstance().verify(data, signature, decoded)
            }
            .toUni()


    override fun createSignature(bytes: ByteArray): Signature {
        return ECDSASignature.decode(bytes)
    }

    override fun curve(): CurveName = CurveName.SECP256K1

    override fun type(): SignatureType = SignatureType.ECDSA
}