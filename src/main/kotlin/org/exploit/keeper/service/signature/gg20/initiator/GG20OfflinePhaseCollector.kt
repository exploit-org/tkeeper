package org.exploit.keeper.service.signature.gg20.initiator

import org.exploit.keeper.api.client.BitKeeperClient
import org.exploit.keeper.extension.successOrThrow
import org.exploit.keeper.extension.toMono
import org.exploit.keeper.service.signature.gg20.GG20OfflinePhaseHandler
import org.exploit.tss.curve.ec.WeierstrassPointOps
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

class GG20OfflinePhaseCollector<P : WeierstrassPointOps<P>>(private val handler: GG20OfflinePhaseHandler<P>) {
    fun collect(peers: List<BitKeeperClient>, sessionId: String): Mono<List<BitKeeperClient>> {
        return handler.broadcast(sessionId)
            .thenMany(Flux.fromIterable(peers))
            .flatMap {
                it.gg20.broadcastOfflinePhase(sessionId).toMono()
                    .flatMap { r -> r.successOrThrow() }
                    .thenReturn(it)
            }
            .collectList()
    }
}