package org.exploit.keeper.service.signature.gg20.initiator

import org.exploit.keeper.api.client.TKeeperClient
import org.exploit.keeper.extension.successOrThrow
import org.exploit.keeper.extension.toMono
import org.exploit.keeper.service.signature.gg20.GG20MtAHandler
import org.exploit.tss.curve.ec.WeierstrassPointOps
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

class GG20MtAInitiator<P : WeierstrassPointOps<P>>(private val mta: GG20MtAHandler<P>) {
    fun startMtA(peers: List<TKeeperClient>, sessionId: String): Mono<List<TKeeperClient>> {
        return mta.exchange(sessionId)
            .thenMany(Flux.fromIterable(peers))
            .flatMap {
                it.gg20.exchangeMta(sessionId).toMono()
                    .flatMap { r -> r.successOrThrow() }
                    .thenReturn(it)
            }
            .collectList()
    }
}