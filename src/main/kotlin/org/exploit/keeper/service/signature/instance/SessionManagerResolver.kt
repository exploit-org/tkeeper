package org.exploit.keeper.service.signature.instance

import io.quarkus.arc.All
import jakarta.inject.Singleton
import org.exploit.keeper.constant.CurveName
import org.exploit.keeper.constant.SessionType
import org.exploit.keeper.db.RocksKeyDB
import org.exploit.keeper.extension.toPrivateKey

@Singleton
class SessionManagerResolver(
    @All
    private val instances: MutableList<SessionManagerInstance>,
    private val db: RocksKeyDB
) {
    fun findManager(type: SessionType, curve: CurveName): SessionManagerInstance? {
        return instances.find { it.session() == type && it.curve() == curve }
    }

    fun findBySessionId(type: SessionType, sessionId: String) : SessionManagerInstance? {
        return instances.find { it.session() == type && it.hasSessionId(sessionId) }
    }

    fun findByKeyId(type: SessionType, keyId: String): SessionManagerInstance? {
        val curve = db.storage.get(keyId)
            ?.toPrivateKey()
            ?.also { it.destroy() }
            ?.curve
            ?: return null

        return findManager(type, curve)
    }
}