package org.exploit.keeper.service.signature.gg20.initiator

import org.exploit.keeper.api.client.BitKeeperClient
import org.exploit.keeper.extension.successOrThrow
import org.exploit.keeper.extension.toMono
import org.exploit.keeper.service.signature.gg20.GG20CommitmentHandler
import org.exploit.tss.curve.ec.WeierstrassPointOps
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

class GG20CommitmentBroadcaster<P : WeierstrassPointOps<P>>(private val handler: GG20CommitmentHandler<P>) {
    fun broadcast(clients: List<BitKeeperClient>, sessionId: String): Mono<List<BitKeeperClient>> {
        return handler.broadcastGammaCommitment(sessionId)
            .thenMany(Flux.fromIterable(clients))
            .flatMap {
                it.gg20.broadcastCommitment(sessionId).toMono()
                    .flatMap { r -> r.successOrThrow() }
                    .doOnError { e ->
                        LOGGER.error(
                            "Failed to broadcast with peer {} (session {})",
                            it.peerId,
                            sessionId,
                            e
                        )
                    }
                    .thenReturn(it)
            }
            .collectList()
    }

    private companion object {
        val LOGGER: org.slf4j.Logger = org.slf4j.LoggerFactory.getLogger(GG20CommitmentBroadcaster::class.java)
    }
}