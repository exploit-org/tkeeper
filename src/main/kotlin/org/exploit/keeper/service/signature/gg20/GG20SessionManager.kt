package org.exploit.keeper.service.signature.gg20

import jakarta.annotation.PreDestroy
import org.exploit.keeper.config.KeeperConfig
import org.exploit.keeper.constant.CurveName
import org.exploit.keeper.constant.KeeperCurve
import org.exploit.keeper.constant.SessionType
import org.exploit.keeper.datatype.InMemoryTemporaryMap
import org.exploit.keeper.db.RocksKeyDB
import org.exploit.keeper.exception.TKeeperException
import org.exploit.keeper.extension.toPrivateKey
import org.exploit.keeper.model.RawPublicKeyDto
import org.exploit.keeper.service.client.TKeeperClients
import org.exploit.keeper.service.pub.PublicKeyService
import org.exploit.keeper.service.signature.ThresholdSessionFactory
import org.exploit.keeper.service.signature.gg20.initiator.*
import org.exploit.signalix.manager.EventScope
import org.exploit.sodium.ReadOnlyBuffer
import org.exploit.sodium.SecretBox
import org.exploit.tss.curve.ec.WeierstrassCurveParams
import org.exploit.tss.curve.ec.WeierstrassPointOps
import org.exploit.tss.ecdsa.GG20Client
import org.exploit.tss.ecdsa.context.GG20Context
import org.exploit.tss.ecdsa.context.aggregator.InMemoryAggregatorContext
import org.exploit.tss.ecdsa.context.crypto.CryptoContext
import org.exploit.tss.ecdsa.context.init.InitContext
import org.exploit.tss.ecdsa.context.integrity.InMemoryIntegrityContext
import org.exploit.tss.ecdsa.context.mta.MtAContext
import org.exploit.tss.ecdsa.generator.GG20CommitmentGenerator
import java.util.concurrent.TimeUnit

abstract class GG20SessionManager<P : WeierstrassPointOps<P>>(
    private val memKey: ReadOnlyBuffer,
    private val keyDb: RocksKeyDB,
    protected val config: KeeperConfig,
    protected val curve: KeeperCurve<P>,

    protected val clients: TKeeperClients,
    protected val pubKey: PublicKeyService,
    protected val eventScope: EventScope
): ThresholdSessionFactory<GG20SessionClient<P>, P> {
    protected val sessionMap = InMemoryTemporaryMap<String, GG20SessionClient<P>>(
        config.session().gg20().expire().seconds, TimeUnit.SECONDS
    )

    private val initData by lazy {
        keyDb.readInitData()
    }

    val respondent by lazy {
        Respondent()
    }

    val initiator by lazy {
        Initiator()
    }

    override fun createSession(
        sessionId: String,
        keyId: String,
        operations: Map<String, ByteArray>,
        publicKey: RawPublicKeyDto,
        participants: List<Int>,
        context: ByteArray
    ): GG20SessionClient<P> {
        val peerId = initData.peerId

        if (!participants.contains(peerId))
            throw TKeeperException(400, "Service is not participant")

        val curveParams = curve.params as WeierstrassCurveParams<P>
        val opsClass = curve.opsClass

        if (operations.size != 1)
            throw TKeeperException(400, "Only one operation is supported for GG20")

        val (opId, message) = operations.toList()[0]

        val publicOps = curveParams.decodePoint(publicKey.data)
        val keyShare = keyDb.storage.get(keyId)?.toPrivateKey()
            ?: throw TKeeperException(400, "Key not found")

        if (keyShare.curve != curve.name)
            throw TKeeperException(400, "Curve mismatch for key $keyId")

        val initContext = InitContext.inMemoryBuilder()
            .message(message)
            .additionalContext(ByteArray(0))
            .build()

        val cryptoContext = CryptoContext.inMemoryBuilder(opsClass.java)
            .idx(peerId)
            .ski(SecretBox.of(keyShare.ski, memKey.read(), true))
            .publicKey(publicOps)
            .curve(curveParams)
            .memKey(memKey::read)
            .participants(participants)
            .build()

        val context = GG20Context.newBuilder(curve.opsClass.java)
            .init(initContext)
            .mta(MtAContext.inMemory())
            .aggregator(InMemoryAggregatorContext())
            .integrity(InMemoryIntegrityContext())
            .crypto(cryptoContext)
            .build()

        val g = curveParams.g
        val q = curve.params.getCurveOrder()
        val h = curveParams.generatorH

        val generator = GG20CommitmentGenerator(q, g, h)

        val client = GG20Client(sessionId, context, generator)
            .apply { init() }

        val session = GG20SessionClient(
            client = client,
            opId = opId,
            message = message
        )

        sessionMap.put(sessionId, session)

        return session
    }

    override fun session(sessionId: String): GG20SessionClient<P> =
        sessionMap.get(sessionId) ?: throw TKeeperException(400, "Session not found")

    override fun clear(sessionId: String) {
        sessionMap.remove(sessionId)?.client?.destroy()
    }

    override fun type(): SessionType =
        SessionType.GG20

    override fun supportsCurve(curveName: CurveName): Boolean {
        return curve.name == curveName
    }

    inner class Respondent {
        val commitment by lazy {
            GG20CommitmentHandler(this@GG20SessionManager, clients)
        }

        val offlinePhase by lazy {
            GG20OfflinePhaseHandler(clients, this@GG20SessionManager)
        }

        val mta by lazy {
            GG20MtAHandler(initData.peerId, clients, this@GG20SessionManager)
        }

        val sigPart by lazy {
            GG20SignaturePartHandler(initData.peerId, eventScope, this@GG20SessionManager)
        }
    }

    inner class Initiator {
        val commitment by lazy {
            GG20CommitmentBroadcaster(respondent.commitment)
        }

        val mta by lazy {
            GG20MtAInitiator(respondent.mta)
        }

        val offlinePhase by lazy {
            GG20OfflinePhaseCollector(respondent.offlinePhase)
        }

        val peerInitializer by lazy {
            GG20PeerInitializer(initData.peerId, this@GG20SessionManager, pubKey)
        }

        val finalizer by lazy {
            GG20SignatureFinalizer(initData.peerId, this@GG20SessionManager, respondent.sigPart)
        }

        val signature by lazy {
            GG20SignatureService(
                clients = clients,
                peerInitializer = peerInitializer,
                commitmentBroadcaster = commitment,
                mtaInitiator = mta,
                offlinePhaseCollector = offlinePhase,
                finalizer = finalizer,
                eventScope = eventScope
            )
        }
    }

    @PreDestroy
    private fun destroy() {
        sessionMap.close()
    }
}