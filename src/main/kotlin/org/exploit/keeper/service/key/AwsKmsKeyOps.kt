package org.exploit.keeper.service.key

import org.exploit.keeper.config.provider.AwsProviderConfig
import software.amazon.awssdk.core.SdkBytes
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.kms.KmsClient
import software.amazon.awssdk.services.kms.model.EncryptionAlgorithmSpec

class AwsKmsKeyOps(private val config: AwsProviderConfig): KeyOps {
    private val kms by lazy {
        KmsClient.builder()
            .region(Region.of(config.region()))
            .build()
    }

    override fun encrypt(payload: ByteArray): ByteArray {
        val encrypted = kms.encrypt {
            it.keyId(config.keyId())
                .plaintext(SdkBytes.fromByteArray(payload))
                .encryptionAlgorithm(EncryptionAlgorithmSpec.SYMMETRIC_DEFAULT)
                .build()
        }

        return encrypted.ciphertextBlob().asByteArray()
    }

    override fun decrypt(payload: ByteArray): ByteArray {
        val decrypted = kms.decrypt {
            it.ciphertextBlob(SdkBytes.fromByteArray(payload))
                .keyId(config.keyId())
                .encryptionAlgorithm(EncryptionAlgorithmSpec.SYMMETRIC_DEFAULT)
                .build()
        }

        return decrypted.plaintext().asByteArray();
    }
}