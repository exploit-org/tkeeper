package org.exploit.keeper.service.key

import java.security.SecureRandom
import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.spec.GCMParameterSpec

class AesKeyOps(private val dek: SecretKey) : KeyOps {
    override fun encrypt(payload: ByteArray): ByteArray {
        val iv = ByteArray(IV_LEN).also { RNG.nextBytes(it) }

        val cipher = Cipher.getInstance("AES/GCM/NoPadding")
        cipher.init(Cipher.ENCRYPT_MODE, dek, GCMParameterSpec(TAG_LEN * 8, iv))
        val ct = cipher.doFinal(payload)

        return iv + ct
    }

    override fun decrypt(payload: ByteArray): ByteArray {
        val iv = payload.copyOfRange(0, IV_LEN)
        val ct = payload.copyOfRange(IV_LEN, payload.size)

        val cipher = Cipher.getInstance("AES/GCM/NoPadding")
        cipher.init(Cipher.DECRYPT_MODE, dek, GCMParameterSpec(TAG_LEN * 8, iv))

        return cipher.doFinal(ct)
    }

    private companion object {
        val RNG = SecureRandom()

        const val IV_LEN = 12
        const val TAG_LEN = 16
    }
}