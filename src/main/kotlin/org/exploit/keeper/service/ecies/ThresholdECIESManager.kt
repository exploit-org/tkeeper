package org.exploit.keeper.service.ecies

import io.quarkus.arc.All
import jakarta.inject.Singleton
import org.exploit.keeper.constant.CipherType
import org.exploit.keeper.constant.CurveName
import org.exploit.keeper.db.RocksKeyDB
import org.exploit.keeper.exception.TKeeperException
import org.exploit.keeper.extension.toBase64
import org.exploit.keeper.extension.toPrivateKey
import org.exploit.keeper.model.Decrypted
import org.exploit.keeper.model.Encrypted
import org.exploit.keeper.model.ecies.PartiallyDecrypted
import org.exploit.keeper.service.core.KeeperInitService
import org.exploit.keeper.service.ecies.cipher.ThresholdCipherService
import reactor.core.publisher.Mono

@Singleton
class ThresholdECIESManager(
    private val keeperManager: KeeperInitService,
    private val db: RocksKeyDB,
    @All private val ciphers: MutableList<ThresholdCipherService>
) {
    fun encrypt(keyId: String, cipherType: CipherType, plaintext: ByteArray): Mono<Encrypted> {
        val curveName = extractKeyCurve(keyId)

        return ciphers.firstOrNull { it.curveName() == curveName }
            ?.encrypt(keyId, cipherType, plaintext)
            ?.map { Encrypted(it.encode().toBase64()) }
            ?: throw TKeeperException(400, "$curveName can't be used for ECIES")
    }

    fun decrypt(keyId: String, cipherType: CipherType, ciphertext: ByteArray): Mono<Decrypted> {
        val curveName = extractKeyCurve(keyId)

        return ciphers.firstOrNull { it.curveName() == curveName }
            ?.decrypt(keyId, cipherType, ciphertext)
            ?.map { Decrypted(it.toBase64()) }
            ?: throw TKeeperException(400, "$curveName can't be used for ECIES")
    }

    fun partialDecrypt(keyId: String, cipherType: CipherType, ciphertext: ByteArray, participants: List<Int>): PartiallyDecrypted {
        val curveName = extractKeyCurve(keyId)

        return ciphers.firstOrNull { it.curveName() == curveName }
            ?.partialDecrypt(keyId, cipherType, ciphertext, participants)
            ?: throw TKeeperException(400, "$curveName can't be used for ECIES")
    }

    private fun extractKeyCurve(keyId: String): CurveName {
        keeperManager.ensureReady()

        return db.storage.get(keyId)?.toPrivateKey()
            ?.also { it.destroy() }
            ?.curve
            ?: throw TKeeperException(400, "Key with id $keyId not found")
    }
}