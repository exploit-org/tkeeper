package org.exploit.keeper.service.gg20.initiator

import jakarta.inject.Singleton
import org.exploit.crypto.signature.Signature
import org.exploit.keeper.api.client.BitKeeperClient
import org.exploit.keeper.config.KeeperConfig
import org.exploit.keeper.extension.toMono
import org.exploit.keeper.service.gg20.GG20SessionFactory
import org.exploit.keeper.service.gg20.GG20SignaturePartHandler
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

@Singleton
class GG20SignatureFinalizer(
    private val config: KeeperConfig,
    private val factory: GG20SessionFactory,
    private val signaturePartHandler: GG20SignaturePartHandler
) {
    fun completeSignature(peers: List<BitKeeperClient>, sessionId: String): Mono<Signature> {
        return Flux.fromIterable(peers)
            .flatMap { it.gg20.computeS(sessionId).toMono() }
            .collectList()
            .flatMap {
                val session = factory.session(sessionId)
                val aggregatorContext = session.context().aggregator()

                aggregatorContext.storePartialS(config.idx(), signaturePartHandler.computePartialS(sessionId).result)

                for (value in it)
                    aggregatorContext.storePartialS(value.serviceId, value.result)

                Mono.just(session.aggregator().calculateSignature())
            }
    }
}