package org.exploit.keeper.service.pub.share

import jakarta.inject.Singleton
import org.exploit.keeper.config.KeeperConfig
import org.exploit.keeper.constant.KeeperCurve
import org.exploit.keeper.db.LMKDB
import org.exploit.keeper.extension.toBigInt
import org.exploit.keeper.extension.toPrivateKey
import org.exploit.keeper.model.key.PubKeyShare

@Singleton
class PublicKeyShareCalculator(private val config: KeeperConfig, private val db: LMKDB) {
    fun pubKeyShare(keyId: String): PubKeyShare<*> {
        val privateKey = db.private.get(keyId)?.toPrivateKey()
            ?: throw IllegalArgumentException("Private Key not found or invalid for $keyId")

        val ski = privateKey.ski.toBigInt()
        val curve = KeeperCurve.fromName(privateKey.curve)

        val point = curve.params.g.mul(ski)
            .normalize()

        return PubKeyShare(config.idx(), curve.name, point)
    }
}