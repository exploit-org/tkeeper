package org.exploit.keeper.service.auth.factory

import jakarta.inject.Singleton
import org.exploit.keeper.config.KeeperConfig
import org.exploit.keeper.config.auth.JwtAuthConfig
import org.exploit.keeper.service.auth.JwtMachineAuthenticator
import org.exploit.keeper.service.auth.NoOpMachineAuthenticator
import org.exploit.keeper.service.auth.RequestAuthenticator
import java.time.Duration

@Singleton
class MachineAuthenticatorFactory(private val config: KeeperConfig) {
    fun createAuthenticator(): RequestAuthenticator {
        val authConfig = config.auth()

        return when (authConfig.type()) {
            JWT -> createJwtAuthenticator(config.auth().jwt().orElseThrow())

            NONE -> NoOpMachineAuthenticator

            else -> throw IllegalArgumentException("Unsupported authenticator type: ${authConfig.type()}")
        }
    }

    private fun createJwtAuthenticator(authConfig: JwtAuthConfig): RequestAuthenticator {
        val location = authConfig.jwksLocation()
        val duration = authConfig.refresh() ?: Duration.ofMinutes(15)

        return JwtMachineAuthenticator(location, duration)
    }

    companion object {
        const val JWT = "jwt"
        const val NONE = "none"
    }
}