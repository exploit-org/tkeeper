package org.exploit.keeper.service.auth.policy

import jakarta.inject.Singleton
import jakarta.ws.rs.container.ContainerRequestContext
import org.exploit.keeper.config.KeeperConfig
import org.exploit.keeper.exception.NotEnoughPermissionsException
import org.exploit.keeper.filter.MachineAuthFilter
import org.exploit.keeper.model.key.KeyData
import org.exploit.keeper.service.auth.NoOpMachineAuthenticator
import org.exploit.keeper.service.auth.RequestAuthenticator

@Singleton
class MachinePolicyChecker(
    private val config: KeeperConfig,
    private val authenticator: RequestAuthenticator
) {
    fun ensureHasPermission(ctx: ContainerRequestContext, permission: String) {
        if (isAnonymous()) {
            return
        }

        val token = ctx.getProperty(MachineAuthFilter.AUTH_PROPERTY) as? KeyData

        if (token == null || !token.hasPermission(permission)) {
            throw NotEnoughPermissionsException()
        }
    }

    private fun isAnonymous(): Boolean = config.auth().allowAnonymous() && authenticator is NoOpMachineAuthenticator
}