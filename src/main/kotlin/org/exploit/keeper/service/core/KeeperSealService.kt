package org.exploit.keeper.service.core

import jakarta.inject.Singleton
import org.exploit.keeper.constant.StoreState
import org.exploit.keeper.db.LMKDB
import org.exploit.keeper.exception.AlreadyInitializedException
import org.exploit.keeper.exception.NotInitializedException
import org.exploit.keeper.model.seal.StatusResponse
import org.exploit.keeper.model.seal.init.InitData
import org.exploit.keeper.service.seal.SealManager

@Singleton
class KeeperSealService(
    private val sealManager: SealManager,
    private val db: LMKDB
) {
    fun initialize(): InitData {
        if (db.isInitialized())
            throw AlreadyInitializedException()

        return sealManager.initialize()
    }

    fun status(): StatusResponse =
        sealManager.status()

    fun submit(payload64: String) =
        sealManager.submit(payload64)

    fun seal() {
        if (!db.isInitialized())
            throw NotInitializedException()

        sealManager.seal()
    }

    fun initialized(): Boolean =
        db.isInitialized()

    fun sealed(): Boolean =
        sealManager.status().state == StoreState.SEALED
}