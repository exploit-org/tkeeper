package org.exploit.keeper.service.core

import jakarta.inject.Singleton
import org.exploit.keeper.db.LMKDB
import org.exploit.keeper.exception.NotInitializedException
import org.exploit.keeper.exception.SealedException
import org.exploit.keeper.extension.decodeBase64
import org.exploit.keeper.model.request.Store
import org.exploit.keeper.util.KeySerializer

@Singleton
class KeeperStorageService(
    private val db: LMKDB,
    private val core: KeeperSealService
) {
    fun store(store: Store) {
        if (!core.initialized())
            throw NotInitializedException()

        if (core.sealed())
            throw SealedException()

        val decodedPrivateKey = store.value64.decodeBase64()

        db.private.save(store.keyId, KeySerializer.serialize(store.curve, decodedPrivateKey))
    }
}