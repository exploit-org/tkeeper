package org.exploit.keeper.service.core

import jakarta.inject.Singleton
import org.exploit.keeper.constant.StoreState
import org.exploit.keeper.db.RocksKeyDB
import org.exploit.keeper.exception.AlreadyInitializedException
import org.exploit.keeper.exception.NotInitializedException
import org.exploit.keeper.exception.SealedException
import org.exploit.keeper.model.request.KeeperInitData
import org.exploit.keeper.model.seal.StatusResponse
import org.exploit.keeper.model.seal.init.SealInitData
import org.exploit.keeper.service.seal.SealManager

@Singleton
class KeeperInitService(
    private val db: RocksKeyDB,
    private val sealManager: SealManager
) {
    private val initData by lazy {
        db.readInitData()
    }

    fun peerId(): Int {
        if (!db.isInitialized())
            throw NotInitializedException()

        return initData.peerId
    }

    fun initialize(initData: KeeperInitData): SealInitData {
        if (db.isInitialized())
            throw AlreadyInitializedException()

        return sealManager.initialize(initData)
    }

    fun status(): StatusResponse =
        sealManager.status()

    fun submit(payload64: String) =
        sealManager.submit(payload64)

    fun seal() {
        if (!db.isInitialized())
            throw NotInitializedException()

        sealManager.seal()
    }

    fun initialized(): Boolean =
        db.isInitialized()

    fun sealed(): Boolean =
        sealManager.status().state == StoreState.SEALED

    fun ensureReady() {
        if (!db.isInitialized())
            throw NotInitializedException()

        if (sealed())
            throw SealedException()
    }
}