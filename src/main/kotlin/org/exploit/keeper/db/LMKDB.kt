package org.exploit.keeper.db

import org.exploit.keeper.service.key.KeyOps
import org.mapdb.DB
import org.mapdb.DBMaker
import org.mapdb.HTreeMap
import org.mapdb.Serializer
import java.io.Closeable
import java.io.File

class LMKDB(dbPath: String, private var opsProvider: () -> KeyOps) : Closeable {
    private val db: DB = DBMaker.fileDB(File(dbPath))
        .fileMmapEnable()
        .transactionEnable()
        .make()

    val private : KeyStore = KeyStore(PRIVATE_KEY_MAP)
    val public: KeyStore = NoOpsKeyStore(PUBLIC_KEY_MAP)

    fun isInitialized(): Boolean = private.hasKey(SENTINEL_KEY)

    fun writeSentinel(ops: KeyOps) = private.saveRaw(SENTINEL_KEY, ops.encrypt(SENTINEL_VAL))

    fun checkValidKey(ops: KeyOps): Boolean =
        private.getRaw(SENTINEL_KEY)?.let { ops.decrypt(it).contentEquals(SENTINEL_VAL) }
            ?: false

    override fun close() = db.close()

    open inner class KeyStore(val mapName: String) {
        private val map: HTreeMap<String, ByteArray> by lazy {
            db.hashMap(mapName, Serializer.STRING, Serializer.BYTE_ARRAY).createOrOpen()
        }

        open fun save(id: String, raw: ByteArray) {
            val enc = opsProvider().encrypt(raw)
            map[id] = enc
            db.commit()
        }

        open fun saveRaw(id: String, raw: ByteArray) {
            map[id] = raw
            db.commit()
        }

        open fun get(id: String): ByteArray? =
            map[id]?.let { opsProvider().decrypt(it) }

        open fun getRaw(id: String): ByteArray? =
            map[id]

        open fun hasKey(id: String): Boolean =
            map.containsKey(id)

        open fun delete(id: String) {
            map.remove(id); db.commit()
        }
    }

    inner class NoOpsKeyStore(mapName: String): KeyStore(mapName) {
        override fun save(id: String, raw: ByteArray) {
            db.hashMap(mapName, Serializer.STRING, Serializer.BYTE_ARRAY)
                .createOrOpen()[id] = raw ; db.commit()
        }
        override fun get(id: String): ByteArray? =
            db.hashMap(mapName, Serializer.STRING, Serializer.BYTE_ARRAY)
                .createOrOpen()[id]
    }

    private companion object {
        const val SENTINEL_KEY = "__meta__"
        val SENTINEL_VAL = "BK-v1".toByteArray()

        const val PRIVATE_KEY_MAP = "privateKey"
        private const val PUBLIC_KEY_MAP = "publicKey"
    }
}