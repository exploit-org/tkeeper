package org.exploit.keeper.constant

import org.bouncycastle.asn1.sec.SECNamedCurves
import org.exploit.threshield.curve.EllipticCurveParams
import org.exploit.threshield.curve.PointOps
import org.exploit.threshield.curve.jce.ECCurveParams
import org.exploit.threshield.curve.jce.ECPointOps
import org.exploit.threshield.ed25519.Ed25519CurveParams
import org.exploit.threshield.ed25519.Ed25519PointOps
import kotlin.reflect.KClass

sealed class KeeperCurve<P : PointOps<P>>(
    val params: EllipticCurveParams<P>,
    val opsClass: KClass<P>
) {
    data object SECP256K1 : KeeperCurve<ECPointOps>(
        ECCurveParams(SECNamedCurves.getByName("secp256k1")),
        ECPointOps::class
    ) {
        override fun createPointOps(bytes: ByteArray): ECPointOps =
            ECPointOps((params as ECCurveParams).x9ECParameters.curve.decodePoint(bytes))

        override val name: CurveName = CurveName.SECP256K1
    }

    data object ED25519: KeeperCurve<Ed25519PointOps>(
        Ed25519CurveParams(),
        Ed25519PointOps::class
    ) {
        override fun createPointOps(bytes: ByteArray): Ed25519PointOps =
            Ed25519PointOps(bytes)

        override val name: CurveName = CurveName.ED25519
    }

    abstract fun createPointOps(bytes: ByteArray): P

    abstract val name: CurveName

    companion object {
        private val _values = listOf(SECP256K1, ED25519)

        fun fromName(name: CurveName): KeeperCurve<*> =
            _values.firstOrNull { it.name == name}
                ?: throw IllegalArgumentException("Unknown KeeperCurve name: $name")
    }
}