package org.exploit.keeper.component

import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.core.JsonToken
import com.fasterxml.jackson.core.StreamReadConstraints
import com.fasterxml.jackson.databind.*
import com.fasterxml.jackson.databind.module.SimpleModule
import com.fasterxml.jackson.module.kotlin.registerKotlinModule
import io.quarkus.jackson.ObjectMapperCustomizer
import jakarta.inject.Singleton
import org.exploit.gmp.BigInt


@Singleton
class JacksonCustomizer: ObjectMapperCustomizer {
    override fun customize(objectMapper: ObjectMapper) {
        objectMapper.factory
            .setStreamReadConstraints(
                StreamReadConstraints.builder()
                    .maxNumberLength(2500)
                    .build()
            )

        objectMapper.registerModule(
            SimpleModule()
                .addSerializer(BigInt::class.java, BigIntHexSerializer())
                .addDeserializer(BigInt::class.java, BigIntHexDeserializer())
        )

        objectMapper.registerKotlinModule()
    }

    class BigIntHexSerializer : JsonSerializer<BigInt>() {
        override fun serialize(value: BigInt?, gen: JsonGenerator, serializers: SerializerProvider?) {
            if (value == null) {
                gen.writeNull()
                return
            }

            var hex = value.toJavaInt().abs().toString(16)
            if (value.signum() < 0) {
                hex = "-$hex"
            }

            gen.writeString(hex)
        }

        override fun handledType(): Class<BigInt> {
            return BigInt::class.java
        }
    }

    class BigIntHexDeserializer : JsonDeserializer<BigInt>() {
        override fun deserialize(p: JsonParser, ctxt: DeserializationContext): BigInt? {
            if (p.currentToken() === JsonToken.VALUE_NULL) {
                return null
            }

            var text: String
            if (p.currentToken().isNumeric) {
                text = p.numberValue.toString()
                return BigInt(text, 10)
            } else {
                text = p.valueAsString.trim()
            }

            val negative = text.startsWith("-")
            if (negative) {
                text = text.substring(1)
            }
            if (text.startsWith("0x") || text.startsWith("0X")) {
                text = text.substring(2)
            }
            if (text.isEmpty()) {
                throw ctxt.weirdStringException(text, BigInt::class.java, "empty hexadecimal value")
            }

            val result = BigInt(text, 16)
            return if (negative) result.negate() else result
        }

        override fun handledType(): Class<*> {
            return BigInt::class.java
        }
    }
}