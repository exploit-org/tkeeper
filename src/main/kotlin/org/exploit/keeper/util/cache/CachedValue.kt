package org.exploit.keeper.util.cache

class CachedValue<T>(
    private val expireAfterMillis: Long,
    private val compute: () -> T
) {
    @Volatile
    private var cached: T? = null

    @Volatile
    private var lastWriteTime = 0L

    fun get(): T {
        val now = System.currentTimeMillis()
        val current = cached

        if (current != null && now - lastWriteTime <= expireAfterMillis)
            return current

        synchronized(this) {
            val second = cached

            if (second == null || now - lastWriteTime > expireAfterMillis) {
                cached = compute().also { lastWriteTime = now }
            }

            return cached!!
        }
    }
}