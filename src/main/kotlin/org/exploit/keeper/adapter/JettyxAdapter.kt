package org.exploit.keeper.adapter

import com.fasterxml.jackson.databind.ObjectMapper
import jakarta.enterprise.inject.Produces
import jakarta.inject.Singleton
import org.exploit.crypto.curve.Ed25519Provider
import org.exploit.crypto.key.ed25519.Ed25519KeyPair
import org.exploit.crypto.key.ed25519.Ed25519PrivateKey
import org.exploit.crypto.key.ed25519.Ed25519PublicKey
import org.exploit.crypto.utils.SensitiveBytes
import org.exploit.jettyx.Jettyx
import org.exploit.jettyx.http2.Http2Version
import org.exploit.jettyx.jackson.JacksonHttpMapper
import org.exploit.keeper.api.auth.KeeperAuthenticator
import org.exploit.keeper.api.client.BitKeeperClient
import org.exploit.keeper.config.KeeperConfig
import org.exploit.keeper.extension.decodeBase64
import java.util.concurrent.Executors

@Singleton
class JettyxAdapter(
    private val config: KeeperConfig,
    private val objectMapper: ObjectMapper
) {
    @Produces
    @Singleton
    fun jettyx(): Jettyx = Jettyx.newBuilder()
        .enableVersion(Http2Version())
        .addHttpMapper(JacksonHttpMapper.create(objectMapper))
        .executor(Executors.newWorkStealingPool(config.parallelism()))
        .build()

    @Produces
    @Singleton
    fun authenticator(): KeeperAuthenticator {
        val privateKey = Ed25519PrivateKey(SensitiveBytes.write(config.privateKey().decodeBase64()))
        val publicKey = Ed25519Provider.getInstance().getPublicKey(privateKey) as Ed25519PublicKey

        return KeeperAuthenticator(config.idx(), Ed25519KeyPair(privateKey, publicKey))
    }

    @Produces
    @Singleton
    fun clients(jettyx: Jettyx, authenticator: KeeperAuthenticator): List<BitKeeperClient> =
        config.peers().map { peer ->
            BitKeeperClient(
                peerId = peer.idx(),
                publicKey = Ed25519PublicKey(peer.publicKey().decodeBase64()),
                auth = authenticator,
                url = peer.publicUrl(),
                jettyx =jettyx
            )
        }
}