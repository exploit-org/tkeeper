package org.exploit.keeper.core.permission

class AntPermissionMatcher(pattern: String) {
    private val patternSegments: List<Segment> =
        pattern.split("\\.".toRegex()).dropLastWhile { it.isEmpty() }
            .map { value: String -> Segment(value) }

    fun match(permission: String): Boolean {
        val pathSegments = permission.split("\\.".toRegex()).dropLastWhile { it.isEmpty() }
            .toTypedArray()

        require(pathSegments.isNotEmpty()) { "Bad permission: $permission" }

        val startsWithWildcard = patternSegments[0].isWildcard

        if (startsWithWildcard && pathSegments.size == 1) return false

        var patternIdx = 0
        var pathIdx = 0

        while (patternIdx < patternSegments.size && pathIdx <= pathSegments.size) {
            val patternSegment = patternSegments[patternIdx]

            if (pathIdx < pathSegments.size) {
                if (patternSegment.matches(pathSegments[pathIdx])) {
                    patternIdx++
                    pathIdx++
                } else {
                    return false
                }
            } else {
                break
            }
        }

        return patternIdx == patternSegments.size && pathIdx == pathSegments.size
    }

    private class Segment(val value: String) {
        val isWildcard: Boolean = "*" == value

        fun matches(segment: String): Boolean {
            return isWildcard || value == segment
        }
    }
}